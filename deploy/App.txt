<!DOCTYPE html>
<html>
<head>
    <title>TS Print Story Cards</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Mon Apr 11 2016 19:35:51 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Apr 11 2016 19:35:51 GMT-0700 (PDT)";
        var CHECKSUM = 7830673481;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.CardConfiguration',{
    singleton: true,

    fetchFields: ["FormattedID","Name","Feature","Description",
        "Release","PlanEstimate",'c_ExtID01QCRequirement'],
                
    displayFields: {
        r1left: { 
            dataIndex: 'FormattedID'
        },
        r1middle: {
            dataIndex: function(recordData) {
                var feature = recordData.get('Feature');
                if ( Ext.isEmpty(feature) ) {
                    return ' ';
                }
                
                return feature.FormattedID + ": " + Ext.util.Format.substr(feature.Name,0,5);
            },
            maxLength: 12
        },
        r1right: {
            dataIndex: function(recordData){   
                var release = recordData.get('Release');
                var release_name = "No Release";
                if ( !Ext.isEmpty(release) ) {
                    release_name = release.Name;
                }
                return release_name;
            },
            maxLength: 15
        },
        r2middle: {
            dataIndex: function(recordData) {
                var name = recordData.get('Name');
                var description = recordData.get('Description');
                
                return Ext.String.format('<strong>{0}</strong><br/><br/>{1}',
                    name,
                    description
                );
            }
        },
        r3left: {
            dataIndex: function(recordData) {
                var qc_id = recordData.get('c_ExtID01QCRequirement') || "";
                
                return 'QC: ' + qc_id;
            }
        },
        r3right: {
            dataIndex: function(recordData) {
                return recordData.get('PlanEstimate');
            }
        }
        
    }
});

Ext.define('Rally.technicalservices.CardTemplate',{
    extend: 'Ext.XTemplate',

    constructor: function(config) {

        this.callParent([
            '<div class="artifact">',
                '<div class="r1">',
                    '<tpl if="this.displayFields.r1left>',
                        '<span class="r1left">{[this.getContent(values, this.displayFields.r1left)]}</span>',
                    '</tpl>',
                    '<tpl if="this.displayFields.r1middle">',
                        '<span class="r1middle">{[this.getContent(values, this.displayFields.r1middle)]}</span>',
                    '</tpl>',
                    '<tpl if="this.displayFields.r1right">',
                        '<span class="r1right">{[this.getContent(values, this.displayFields.r1right)]}</span>',
                    '</tpl>',
                '</div>',
                
                '<div class="r2">',
                    '<tpl if="this.displayFields.r2middle">',
                        '<span class="r2middle">{[this.getContent(values, this.displayFields.r2middle)]}</span>',
                    '</tpl>',
                '</div>',
                
                '<div class="r3">',
                    '<tpl if="this.displayFields.r3left>',
                        '<span class="r3left">{[this.getContent(values, this.displayFields.r3left)]}</span>',
                    '</tpl>',
                    '<tpl if="this.displayFields.r3right">',
                        '<span class="r3right">{[this.getContent(values, this.displayFields.r3right)]}</span>',
                    '</tpl>',
                '</div>',
            '</div>',

            {
                getContent: function(recordData, displayField) {

                    var val = recordData.get(displayField.dataIndex) || "&nbsp;";
                    if (displayField){
                        if (Ext.isFunction(displayField.dataIndex)){
                            val = displayField.dataIndex(recordData);
                        } else {
                            val = recordData.get(displayField.dataIndex) || "&nbsp;";
                        }
                        
                        if (displayField.maxLength > 0){
                            val = Ext.String.ellipsis(val, displayField.maxLength, false);
                        }
                    }
                    //console.log('getContent', recordData, displayField, val);
                    return val;
                },
                displayFields: config.displayFields
            }
        ]);
    }
});
Ext.define('Rally.technicalservices.window.PrintCards',{
    extend: 'Ext.Window',
    logger: new Rally.technicalservices.Logger(),
    truncateText: '...',
    config: {
        title: 'Print Cards',
        records: null,
        styleSheetTitle: "printCards",
        currentDocument: null,
        /**
         *  Array of the following:
         *  dataIndex
         *  maxLength (default 0)
         *  cls (defaults are: card-title, content,
         */
        displayFields: null
    },
    constructor: function(config){
        this.initConfig(config);
    },
    show: function(){
        var options = "toolbar=1,menubar=1,scrollbars=yes,scrolling=yes,resizable=yes,width=1000,height=500";
        this.win = window.open('',this.title);

        var html = this._buildCardsHTML();

        this.win.document.write('<html><head><title>' + this.title + '</title>');
        this.win.document.write('<style>');
        this.win.document.write(this._getStyleSheet(this.styleSheetTitle));
        this.win.document.write('</style>');
        this.win.document.write('</head><body class="landscape">');
        this.win.document.write(html);
        this.win.document.write('</body></html>');
    },
    
    print: function() {
        if ( !this.win ) {
            this.show();
        }
        this.win.print();
        this.win.close();
    },
    
    _buildCardsHTML: function() {

        var html = '';
        var total_cards = this.records.length;
        var card_num = 0;

        var t = Ext.create('Rally.technicalservices.CardTemplate', {
            displayFields: Rally.technicalservices.CardConfiguration.displayFields
        });

        Ext.each(this.records, function(r){

            // changing to record so that setting new fields doesn't get lost
            //html += t.apply(r.getData());
            html += t.apply(r);

            card_num ++;
            if ((card_num) % 4 === 0) {
                html += '<div class=pb></div>';
            } else if (card_num === total_cards - 1) {
                html += '<div class=cb>&nbsp;</div>';
            }
        },this);
        //console.log('html',html);
        return html;
    },
    
    _getStyleSheet: function(styleSheetTitle) {
        this.logger.log('getStyleSheet');
        var styleSheet;
        // var docs = Ext.getDoc();
        var elems = this.currentDocument.query('style');

        for (var i=0; i< elems.length; i++){
            if (elems[i].title == styleSheetTitle){
                styleSheet = elems[i];
            }
        }
        return styleSheet.innerHTML;
    }
});
Ext.define("TSPrintStoryCards", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },

    layout: 'hbox',
    
    integrationHeaders : {
        name : "TSPrintStoryCards"
    },
                        
    launch: function() {
        
        this.add({
            xtype:'rallyiterationcombobox',
            fieldLabel: 'Iteration:',
            labelWidth: 55,
            width: 200
        });
        
        this.add({
            xtype: 'rallybutton',
            text:'Print Cards',
            listeners: {
                scope: this,
                click: this._printCards
            }
        });
        
    },
    
    _printCards: function() {
        var iteration = this.down('rallyiterationcombobox').getRecord();
        if ( iteration ) {
            var iteration_name = iteration.get('Name');
            this.logger.log('Print Stories from Iteration: ', iteration);
            
            var config = {
                model: 'HierarchicalRequirement',
                filters: [{property:'Iteration.Name',value:iteration_name}],
                fetch: Rally.technicalservices.CardConfiguration.fetchFields
            };
            
            this._loadWsapiRecords(config).then({
                scope: this,
                success: function(stories){
                    this._openPrintCards(stories);
                },
                failure: function(msg) {
                    Ext.Msg.alert('Problem loading stories', msg);
                }
            });
        }
    },
    
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _openPrintCards: function(records){
        this.logger.log('_openPrintCards', records);
        
        var fields =[{
            dataIndex: 'Name',
            maxLength: 200,
            cls: 'card-title'
        },{
            dataIndex: 'FormattedID',
            cls: 'card-id'
        }];
//
        var win = Ext.create('Rally.technicalservices.window.PrintCards',{
            records: records,
            displayFields: fields,
            currentDocument: Ext.getDoc()
        });
        
        win.show();
        win.print();
    },

    _loadAStoreWithAPromise: function(model_name, model_fields){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        this.logger.log("Starting load:",model_name,model_fields);
          
        Ext.create('Rally.data.wsapi.Store', {
            model: model_name,
            fetch: model_fields
        }).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(this);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('TSPrintStoryCards', {
                   name: 'TS Print Story Cards'
               });
        });
    </script>
    
    <!-- <style type="text/css"> -->

<style type="text/css" title="printCards">
/* PLEASE LEAVE THIS STYLESHEET INLINE SINCE TITLE IS NECESSARY */
@media print {
    #interface {
        display: none;
    }

    .pb {
        page-break-after: always;
        clear: both;
    }
}

#interface, #printSection {
    margin: 20px;
}

html {
    background-color: #fff;
    color: #000;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    margin: 0;
    padding: 0;
}

body {
    background-color: #fff;
    margin: 0;
    padding: 0;
}

.cb {
    clear: both;
}

.artifact {
    background-color: #fff;
    border: 2px solid #000;
    float: left;
    width: 4.55in;
    margin: 0.3in 0in 0in 0.3in;
    position: relative;
    overflow: hidden;
}
.r1 {
    display: table-row;
    border: 1px;
    border-bottom-style: solid;
    margin-bottom: 2px;
    height: 0.5in;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    color: #000000;
    text-align: center;
}

.r1left {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    border-right: 1px solid #000;
    width: 1.5in;
}

.r1middle {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    width: 1.75in;
    border-right: 1px solid #000;
}

.r1right {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    width: 1.5in;
}

.r2{
    border: 1px;
    border-top-style: solid;
    border-bottom-style: solid;
    margin-top: 2px;
    font-family: NotoSans, Helvetica, Arial;
    font-size: 12pt;
    padding-left: 0.5em;
    overflow: hidden;
    padding-right: 0.5em;
}

.r2middle {
    display: block;
    vertical-align: middle;
    text-align: left;
    height: 2.25in;
}

.r3{
    border: 1px;
    border-bottom-style: solid;
    height: 0.5in;
    padding-left: 0.5em;
    text-align: center;
}

.r3left {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    border-right: 1px solid #000;
    width: 2.3in;
}

.r3right {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    width: 2.3in;
}

.header {
    border: 1px;
    border-bottom-style: solid;
    display: table-cell;
    height: 40px;
    vertical-align: middle;
}

.card-title {
    font: bold 28px Genova, sans-serif;
    padding-top: 0.5em;
    text-align: center;
}

.description {
    float: left;
    font: 12pt Georgia, sans-serif;
    margin: 0.25em auto 0 auto;
    padding-left: 1.0em;
    padding-right: 1.0em;
    overflow-y: hidden;
    width: 100%;
    word-wrap: break-word;
}

.owner {
    float: right;
    height: 40px;
}

.ownerText {
    float: right;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    margin-right: 0.3em;
    margin-top: 0.3em;
}

.card-id {
    float: left;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    margin-left: 0.25em;
    margin-top: 0.3em;
}

.estimate {
    bottom: 0.5em;
    position: absolute;
    right: 0.5em;
}

.content {
    height: 2.4in;
    overflow: hidden;
}
</style>
<style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

</style>
    <!-- </style> -->

</head>
<body></body>
</html>